#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞ GrowTasks
 * –ó–∞–ø—É—Å–∫: node check-health.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞ GrowTasks...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'package.json',
  'vite.config.ts',
  'tsconfig.json',
  'src/main.tsx',
  'src/App.tsx',
  'src/index.css',
  'index.html'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
const requiredDirs = [
  'src',
  'src/components',
  'src/components/ui',
  'src/pages',
  'src/hooks',
  'src/lib'
];

console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫:');
requiredDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    console.log(`  ‚úÖ ${dir}/`);
  } else {
    console.log(`  ‚ùå ${dir}/ - –ù–ï –ù–ê–ô–î–ï–ù–ê`);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
  console.log(`  ‚úÖ –í–µ—Ä—Å–∏—è: ${packageJson.version}`);
  console.log(`  ‚úÖ –ò–º—è: ${packageJson.name}`);
  
  if (packageJson.scripts) {
    console.log('  ‚úÖ –°–∫—Ä–∏–ø—Ç—ã:');
    Object.keys(packageJson.scripts).forEach(script => {
      console.log(`    - ${script}: ${packageJson.scripts[script]}`);
    });
  }
  
  if (packageJson.dependencies) {
    console.log(`  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageJson.dependencies).length}`);
  }
  
  if (packageJson.devDependencies) {
    console.log(`  ‚úÖ Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageJson.devDependencies).length}`);
  }
} catch (error) {
  console.log(`  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
if (fs.existsSync('node_modules')) {
  console.log('  ‚úÖ node_modules/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
  const keyPackages = ['react', 'vite', 'typescript'];
  keyPackages.forEach(pkg => {
    const pkgPath = path.join('node_modules', pkg);
    if (fs.existsSync(pkgPath)) {
      console.log(`    ‚úÖ ${pkg} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    } else {
      console.log(`    ‚ùå ${pkg} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    }
  });
} else {
  console.log('  ‚ùå node_modules/ –ù–ï –ù–ê–ô–î–ï–ù–ê - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ yarn install');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–æ–≤
console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ lock —Ñ–∞–π–ª–æ–≤:');
const lockFiles = ['yarn.lock', 'package-lock.json', 'bun.lockb'];
lockFiles.forEach(lockFile => {
  if (fs.existsSync(lockFile)) {
    console.log(`  ‚úÖ ${lockFile}`);
  }
});

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Node.js 18+');
console.log('  2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: yarn install');
console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: yarn dev');
console.log('  4. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8080');

console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
